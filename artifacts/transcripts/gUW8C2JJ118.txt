okay I hope uh everyone can see me and uh can also see the presentation yes all right um yeah so before we We Begin uh just wanted to set the stage for our Deputy um and that's what this uh presentation is is part of so WWE uh it's uh it's a monthly informal event uh that uh organizes um and um and it's not uh something where only say GB is like me uh we we have speakers from other um other parts of the industry as well um and uh today as part of uh definitely I'm going to talk about the history and future of containers uh it's uh something uh that I am fairly passionate about um of which probably brings me to my introduction uh I am I'm PK and I am um I'm a tech principal at uh Melbourne um Melbourne as you would know is uh is the sports capital of Australia and also home of the NCG uh we're not going to talk about sports today unfortunately uh but it is close to midnight here and uh hopefully you are having a wonderful evening as well um I have been uh um in the in the containers and like devops devops World in general for the last uh plus I would say uh around 15 years and uh and quite a few years of like General programming before that and uh we have recently uh started uh the operations uh in in Australia and uh yeah and that's the journey I'm part of so uh today uh I will be talking about uh the history and the future of of containerization this is roughly what we're going to talk about like uh we will try to stick to uh what's here but um yeah in case uh you have any questions just post them uh on the chat and uh I will I will come to it uh eventually you either as per as we go or I will probably uh come to it um later uh if it's uh learned then um so we are going to talk about uh what is a container first of course like figmented of what the history of containers it's important for us to be on the same page uh we are then um dive into the history of contents we have been we're basically going to talk about uh like this some decisions or or some some projects that kind of like led to um the containerized world that we live in nowadays we will then very briefly look at the present world of of containers um and and then we will talk about um the future of of of containers I will try to predict the future I know I will be probably uh 99 wrong but uh um well we can we can always guess what is going to happen depending on um the trends we see in the industry nowadays all right um so so before we uh dive into this um a show of hands you can just uh type in the chat if you want um like how many of you have uh used containers before all right clearly clearly a lot of you and uh and that's not really a surprise right I mean if you if you look at uh um the world we are we are living in um and and there's and the software development that we are uh are part of uh we we almost always uh talk about uh deploying to Containers or or we are we um at least uh have containers uh as part of a conversation where when it comes to uh modern application deployment right but let's let's try to formalize our our thoughts that we all have used containers and and I guess like we are just so used to it that that uh like we might we might struggle to exactly Define uh what exactly is a container so what is a container uh sorry for the for the obligatory uh Tupperware image I guess like that's kind of mandatory if you if you if you're doing a talk about containers um yeah so so my definition of a container uh is that container containerization is an OS level virtualization technique that bundle software and its dependencies in a portable package that can be then um used and reused uh across uh different platforms but but the key word here is virtualization right I mean this is this is kind of a very weaseling out kind of a definition because now I have to explain what what virtualization is right and uh let's do that then what is uh virtualization well in very simple terms like virtualization is simply uh Paradigm or a pattern where um the host kernel um which is the operating system kernel it allows the existing of multiple isolated user space guest in instances we will look at some of these definitions as we go like what is user space what does it mean to be a host and what does it mean to be a guest but but uh roughly what this means is that you have one operating system and um and and you can have like multiple different operating systems kind of like living on top of it now this is not an accurate definition and we will come to uh why but uh but for the for the sake of of a conversation and and for uh uh and for a decent understanding it's a good enough uh definition all right so coming back to what is the container right I mean when when we talk about uh containers um like we we think about something that that we that we build into an image and then we sort of like run it or basically deploy it right um so it has a it has a limited view of the of the file system uh which means that uh it it carries a file system uh with it and you can mount a host file system into it as well uh it is also a user space process um this is opposed to something being uh being in kernel space or or being uh being a privileged process which which means that uh like uh you can't really run um things that um you will not be able to run in a regular user space um uh process like like for example device drivers like you will not really see people attempting to write device drivers um in in a in a container for a bunch of different reasons and um and it's very important to note that like because we are we are talking about um um user space processes like the the the the kernel of the of the contain of the container is actually shared uh with the with the host operating system this of course means that it might actually share some of the hosts vulnerabilities but like there are there are again uh then there is there are players between between the two so uh depending on how the container has been implemented uh you may or may not have to concern yourself with this um and of course very important to note that this is the software level virtualization uh you don't have direct access to um hardware and and really that there is a there's a container engine on on top of which uh the container is running which is actually um the the secret sorts it's it's it's basically translating the calls that the host is making so sorry the guest is making for the host again we have to we have to understand that this is not this not done this is not an emulation there's not a hardware level emulation or something like that this is purely a uh purely a translation of of uh of system calls so direct system calls are uh being used and um of course uh a container a container is simply just another uh process for the host which means that it is quick to start up it is very lightweight uh this is unlike uh some other heavyweight virtualization techniques that we will look at later uh but it means that because it's it's a very quick to start and it's lightweight it's it's also disposable which means that you don't really have you don't really want to fall in love with okay because it's a single instance of a container there will be more um you don't have to worry about the instance you have at hand with which kind of like really lends lends to the immutable infrastructure movement that's been going on through the last couple of years where um where you when you talk about uh um we talk about having infrastructure which does not uh change you simply replace it and uh containers kind of like make it uh very easy to have uh something like that um and last of course like uh the reason why we have containers uh running on horses that uh we are able to run multiple um containers on a on a single host which of course means you can't really give every single container 100 of the memory 100 of the CPU so you are able to configure uh or fine tune the resources that you allocate um to our container right so that is the definition of what is a container but well what is not sorry uh did I go on mute okay sorry um come back to uh what is not a container we just spent quite a bit of time like trying to explain what is a container it's also important to understand what is not a container because there are other virtualization techniques uh out there uh which look which will serve kind of uh the similar uh function at times but they are not really continuous right um not all virtualization techniques are actually uh containers and and here here is kind of a laundry list of of things which uh kind of look similar but they are not exactly continuous uh I won't I won't go through each and every one of those but like uh I'll just talk about virtual machines for example like virtual machines are like full stack vesselization are down to the hardware which means uh it has the entire uh stack um uh the the entire operating operating system uh stack which which needs to get initialized and it has a full OS that it needs to uh when to use containers and when to use VMS um that is that is uh that is the age-old question right like when do you when do you want to uh use containers and when you want to use Virtual machines um virtual machines are fairly powerful um um but it has costs uh in terms of um in in in in terms of like uh startup uh speed for example um plus it is not as disposable as your as your regular contains so if you if you want a quick auto scaling um for example or if you have very fixed kind of workloads which are not really going to change very often you can you can you can decide to use Virtual Machine if you have ever used uh any cloud service uh if you if you ever uh provision like an ec2 server um it is a virtual machine right so you can you can do regular stuff that you can do and do on your computer that that you'll be able to do on the virtual machine and this this includes uh possibly uh fairly low level uh Hardware stuff as well again uh there are limits to what you can do on a on a virtual machine but you can definitely uh extract a fair bit of more Hardware performance out of uh or out of a virtual machine then you would be able to do in a container and uh security uh if you're very paranoid of about uh the security and of course like um containers and container orchestration tools do have layers of security and and in fact the last couple of years the the the the the container the container world has spent a lot of effort on uh on uh making the ecosystem more and more uh secure uh but but at a fundamental level um our container still shares the same kernel with the host OS and virtual machines don't actually do that though so so the virtual machine actually has a different uh host kernel and a different uh guest kernel which means that you have you are more in control of of the security uh if you are an application um yep so some of some of the examples of things which are not containers jails now jails are pretty interesting because they are kind of similar to containers in the sense that they also isolate single processes uh and uh and uh most uh Linux Kernels have been built support for jails but they don't offer the same kind of flexibility at times but it doesn't mean that um jails are not useful jails are very very prevalent uh in the sysadmin world uh where uh where users or users or guests to um to to systems are simply provided a quote-unquote jail uh where they can um execute their processes um we will talk about games uh in a little more detail uh in the following slides so I won't really go very deep into that and there are other examples on this slide uh um I'll just let you uh spend a second on this and and then move on you know I'm basically talking about stuff like virtual kernels um virtual private servers like these are fairly esoteric uh sounding but they all have some sort of uh Advantage uh that uh some uh people might want to um take use of all right let's begin our history lesson uh I have a big confession to make I'm not a I'm not a historian I am just a just a regular Tech Guy um like just like you so that the dates in there or of the or the events in there they might not be 100 uh accurate uh these are these are uh things that I've told the internet um um for and uh of course the internet has multiple sources of Truth so hopefully hopefully um these kind of make uh sense to you but this is not the question this is not the gospel all right so in the beginning like before there was anything else uh there was CH route now some of you might be familiar with uh with uh CH root um and uh and sea suit is kind of a very low level kind of a technique but it is still a technique that is widely uh used um in in a lot of uh higher abstracted things like uh containers and uh and and for a very good reason so so so the reason uh CH route was was invented was because uh someone wanted to test a particular system like a new system feature uh in isolation so they wanted to wanted that particular system process to have have a different file system root and to do that they they basically invented um CS route and then it was kind of generally um available around 1979. um as I said um like you are able to change the um root file system for uh for a process so if you are a CH rooted process you that is the view of the file system that you have you don't know what what exists outside uh and uh one very interesting thing that that I really like what CS Shooters are CS route uh um is also called uh Gene and and it's actually called jail because uh very famously uh someone was able to Honeypot a hacker um uh and uh and uh cast them uh in in the ACT uh for those who know for for those who are not familiar honey potting is where uh where you layer a hacker into into a system uh where they kind of like assume they have actually breached uh breached the the system but but they're actually in a in an isolated environment where they're not able to make any damage right so this is kind of like roughly what uh What uh doing CH root uh looks like uh do you guys want to want to demo for this I have a quick demo that I can play around with it should only take a minute right bear in mind that I'm I'm on OS X so I actually have to get into a container to actually uh play around with a lot of these uh commands but let's see how it goes so we're here let's just quickly see what our view of the world is uh we are right now in a in a in a container and uh of course let me know if you can see it is this big enough yeah it's big enough all right um so this is the view of the world uh for for a regular process uh it can see that there are so many things in in root and it can play with it as it fonts um so let's let's start uh jailing so for for that we will first have to uh create a jail so we are just creating a very uh rough kind of a structure for it a jail it will simply be a directory that will be mounted as root uh for that process or we have to do a few things here which are which I'll do to make sure that the jail works uh we we have to uh we have to understand that when somebody is in the is in a jail they are not able to access any other files which means that if we are if you want things like even LS you actually have to provide it as as part of that jail so I have to copy uh the ls bin um I have to copy the dependencies so this is what the roughly the dependencies look like and uh for the purposes of this demo I have at my home prepared this already so let's let's also kind of try to run bash in our jail because that will be nice otherwise we will not have a terminal to play with and now simply try to run the jail now we are in the jail and how do I know let's try to run the command that we did which was LS minus l here you go so all I can see is these three directories that I had created earlier that then lived and lived 64. and that is that is all my all that is my my view of it you you can also see that my my user id uh is uh is uh is zero um which which means that I don't really like it it's not really the the same as what I had started with and I can quickly come out of the jail because this is not a actual gym I can actually come out and uh yeah just to just to prove that we're out of the gym here we go so so this is this is kind of like what uh what a jail looks like um uh thank you thank you um I I could have uh written some some loots or some of but uh yeah it was just easier to just place them on all right all right uh yeah so so that is kind of what uh CS route is like so clearly it's fairly basic all I'm all I'm actually doing is uh just just changing the the route um of the of the of the file system there are of course like some some nuances and and and I think like until uh Linux 3.8 uh like kernel 3.8 it was possible to like run some privileged uh um commands but but I think that that has been um passed in so um you can you can run a jail with a little more impunity now all right so that was the CH root jail but that was 1979 right and now we are what 2022 I think like I think in in Australia it is 2022 but we are a little ahead uh in in the in the time zone um so it took it took a good like 20 21 years um for for uh for this technique to sort of like really uh take a take a foothold in like a general software development FreeBSD um um uh came up with it with a with the idea of like CS route on on steroids and uh here um here it's it's kind of very very interesting because um it not only emulates the uh well sorry it it not only uh virtualizes the file system but now it also virtualizes the users uh the network the processes and and it and it and it really sort of like uh um sort of like popularize the the whole um I should not say whole concept because the concept was there but but it but it but it really popularized uh um uh deals uh in in uh in general and uh like around 2000 uh these things started uh picking up this is roughly what what it looks like again uh this runs on FreeBSD and I don't have a FreeBSD uh image with me so um I cannot have a demo for this but let's see uh this is roughly what what that configuration looks like fairly familiar uh to to us uh if you if you have used Docker before but the interesting thing is you can actually virtualize the IP address as well so the network stack is virtualized uh you can see you can mount some some devices and you can have a start and stop command so so fairly fairly more mature uh than than your regular uh CH root all right so guys like just just uh swap me uh if if I'm if I'm not making sense or if you have any uh questions all right which kind of like has us um move on to c groups or uh well container groups or sorry control uh groups as uh as they they are supposed to be uh called like so this was a this is like the original process container where where uh like people at Google uh I think he came up with this and uh and um and now people started kind of like taking the the the the concept of um like having having group of uh processes um uh um sort of like having similar properties and uh having uh like similar levels of uh virtualization so so so so C group uh allowed um a more kind of like fine-grained control over allocation uh of of resources so now you could say that I want to give someone uh 150 units of of CPU or some process like 300 units of of memory uh and and it also um provided namespace for for the for the processes now namespace is is was not a New Concept uh in 2006 because Linux had introduced namespaces back I think around 2000 2002. and namespace really what it allows you to do is uh you did just like just like your your code that you write in Java or C sharp right I mean it kind of like provides kind of a lack of a better word a container for uh for for various things so um so your process IDs are are kind of like namespaced so that your uh things inside uh inside your C group uh don't really get get affected or are not aware of of things outside their their C group same with the users uh and and and other things that that you can uh probably uh think of but more more importantly it it also allowed the prioritization of of processes and we have to understand C Loops is still a very very mature thing and it's still used uh widely in almost every containerization system and and this is because it it allows you to give give a container uh higher or lower priority uh in terms of scheduling and even more importantly it can actually account for the resource usage so it can actually tell uh tell that a process actually used uh 150 units of CPU or for for this much time or this much memory and this kind of like helps you commercialize the thing that you're building as well and and of course like it also uh um helps you gain a better understanding of how your resources are being used c groups unfortunately I cannot run it inside a container because uh for this like uh there there needs to be a little more support from the host and I'm running on Mac so unfortunately I will not be able to share this but if we execute this at this exact set of commands I hope it works but this kind of gives you gives you an idea right like we are creating two uh groups of processes uh one fast one slow the first one we are giving 768 units of CPU the slogan we are giving um it will it will work you know again yes um yeah this will definitely work in a VM uh the the problem is that uh when you are in in a container some of the uh some of the uh file system is actually actually read only and for c groups you basically have to uh create uh kind of a tree structure in the in the uh in in one of the system directories which which is which is pretty cool because now you can like control um control the priority or or allocation of resources simply by creating a file or or just like rewriting uh to a file um yeah so so here you can see like you you are basically able to then um run both of these processes and and in theory what you should see is um the the first one is going to uh take a lot more CPU uh than the than the slow one and then came the Big Daddy of of it all uh this was Docker before there was docker sorry uh with minus t in one option we have slash and then the other you don't okay so uh I think it might be a typo no no no no no no this this would this would actually work uh in the in the first case I think uh it uh it uh points to uh directly if I'm not wrong okay I mean I yeah and the second one it does not but I have not been able to run it I tried this whole evening and uh unfortunately I wasn't able to verify this um but but some some blogger was able to run this one I'm hoping it is correct oh okay okay cool sorry about that uh yeah so Alexi uh was like the first like superhero uh Blockbuster like mainstream container uh tool it was talking before there was Docker and uh this kind of like uh changed the game because now people started talking about uh applications in general uh rather than just very low level processes and and things like that so now you could configure or container and like if you go back to our original definition of of the container containers are really uh software with with its uh dependencies bundled together so now you were able to specify all of that through uh through a configuration the configuration is still out like one can argue it's not as polished as it is for uh Docker with its Docker file and things like that but but it was definitely much better than than and then where we were back in 2008 so this kind of like said the said the tone for uh for for rest of the that that rest of the time to come as far as containers are are concerned and Alexi was actually pretty much the the backbone for for early uh Docker because the early talk I think till like version 0.9 or one dot zero uh it uh it still relied on election for actual uh virtualization so this is kind of like what it looks like we are able to uh create uh create an image just like you will for um select in like you do in a Docker you can list your images you can launch images you can actually copy one image to view to the other you can exit into into uh in uh into into uh into a container you can you can list you can list your containers as well and and you can you you can run either in privilege or on privileged mode so it kind of like gives you a bit more sense of you know what what are you actually trying to do rather than um so sort of like give privilege um access by default like it was an early document um I have a demo for this um the good people at uh at lxc actually uh provide you with I should have done this before the call again yep all right so they actually provide a tutorial and it's actually pretty good but uh I will try to not be able to copy things all right let's just quickly corporate some things sorry so so the First Command field because uh this actually supports lxd uh syntax so lxc as a semi so notes say lxd is the improved BS ux actually experience for lxc so nowadays from uh most modern lxc deployments um let you so we don't have any images here let's launch an image it's doing something it's pretty fast so we shouldn't have to wait too long hopefully okay there you go and we can actually list the container so now we have a container running and you can actually now you know if we are in our container already so so so I as you can see like let's see like the feel of Alexa is very similar to to to uh to Docker and and this is also because the LLC that I'm using now is actually a much more refined version of what it used to be but uh but but you kind of like get an idea that they are fairly similar uh as far as uh like basic uh containers are concerned uh sorry I have a question sorry I have a question since c groups consider priority purposes does it mean that it interacts with OS processes uh schedule is directly so so c groups are actually uh um uh like like like the basic support for C Roots is is uh is part of uh most uh distributions so um so yes so so CC groups the the practice actually the the when you when I actually run C group right and when you're outside uh in the host you can actually see that it is just another process that is that is running as far as the host is concerned so so the priority is actually uh Set uh at the at the host like uh like you would do with uh with a low level command like nice uh where you can set the priority of your process thank you all right which brings us to docker which is something I'm sure a lot of us are already familiar with uh so Docker uh was like the first consumer grade uh container I just showed you a demo for a Galaxy and uh and it and and as I said it's a bit of a uh uh it's it's a bit of a red herring uh in terms of how how easy it was to do it it wasn't that that easy uh back in the day uh in 2008 and that's that was my introduction uh that was my introduction uh to uh uh two containers uh PD has asked why don't we have as much about lxc as Docker well I don't have a marketing degree but I think it has to do uh do do with uh do a lot with with with marketing um uh lxc was popular um but it wasn't as user-friendly it was still used quite a lot um but Docker came up with a few things which made it very very attractive um things like providing a free container registry for example yeah I'm sure you're writing uh yeah like it it uh it came up with the precursor of of Docker up for example so it was it was easy to sort of um uh quickly get get uh get started uh with uh with docker um Docker also made it very easy uh to write uh images for containers yourself because Docker file was like just one file they also introduced things like uh um file system layers essentially which which made uh uh which which like I think they did not do it in the first version but but they started caching uh the the layers uh in in the docker file which meant that it was easier to iterate uh over uh as far as uh like writing new images and containers was was concerned and uh it was it was so popular that uh I think like uh within within a few years it was valued at one billion uh dollars and uh as you would know um a few years ago I think around 3 4 8 2019 maybe uh it was bought over by by a company for a much lower uh price because of various reasons uh that I cannot cover as part of this presentation but yeah so Docker was so popular that almost immediately uh it was adopted by the cloud providers I think IBM uh Cloud Master must be uh which I think ultimately now we see ECS which is the elastic Computer Service um that that's there on uh ews um so so yeah so Docker Docker uh was very very popular that is true um so uh I think uh is making a very valid point that Alexi was was focused more uh towards the admin Administration side of things um and uh like things like uh things like containers uh were not looked at as as a as a developer tool um so so to so so this weekend and around around uh yeah I would think like uh 2000 Day 2010 where when the devops moment really uh took off Alexi was there and people started using it but it was more of an more of an Ops thing than than a Dev thing um back in the day Dockers just made it so easy uh with with it with its packaging that that uh that it just took off all right I am I'm not really planning to uh give you a demo of Taco because I'm guessing you guys might be familiar with it but just for the sake of completeness I will I will run uh I've done a document so I'll just come out of this and this is this is kind of like roughly what what uh what a very simple uh Docker container uh looks like I'm simply running an image called Ubuntu um I'm running the 18.04 version of it and uh and it'll it will simply run right and and I can run any other version and it's like super quick uh Docker when you say Docker it's not just running off the image it's it's also um bundling of the of the image and things like that as well which we will come to in the next one um so Docker being popular meant that uh the the other uh competitors that they that uh there were uh had to sort of like uh come to a common ground with uh with uh with Docker uh I think the number one competitor back then was uh core OS rocket um and uh rocket kind of like rocket and uh and uh Docker came together to form uh the open container uh um well initiative or oci and that kind of like uh made sure that uh that people have a at a Level Playing Field uh now you could build containerization systems which which uh which adhere to oci Specs now when you say oci spec as I said you you can either create an image or will and and you can uh run that image as well so oci I think has two standards one for the image one for the running of it uh oci I think around 2015 it says uh yeah so around 2015 it uh it uh it was donated um as as open source uh um by by Docker and it came and it came with the with runcie which was a reference implementation of oci and uh Ramsey actually is still going strong um and uh it is still uh used by a lot of containerization systems and and this whole initiative kind of like meant that there were a lot of uh Docker clones um that that came to be uh things like uh um kubernetes uh and and other other such in initiatives really um um got a lot of Advantage uh from these things being open source foreign you can write but as an industry when you sort of like agree on on common standards that really helps you to sort of uh cut through a lot of uh baggage that you would normally have to all right so as uh as containers started becoming more and more prevalent um I think uh I was trying to um apartment kind of yeah like my apartment is oci uh compliant apartment definitely uh um took advantage of the oci uh ecosystem uh apartment also uh became popular because a lot of people are not happy with the direction Docker was taking and again I can't really covered this cover that as part of this particular um presentation but maybe that's that's a different conversation we can have um yeah so so as um and as more and more people started um creating containers I think um I was trying to find the statistics about like how many containers uh there are running in the world and in the last I could find was like from 2019 and there were like 29 billion containers that had been spawned and since then it must have it must have doubled or even more uh in the in the next three years because nowadays uh containers are even more disposable because of uh orchestration systems like kubernetes that came in and totally dominated the market so um how many of you have have heard of kubernetes or used well used kubernetes can I have a show of hands right right so so a lot of so a lot of you right and and and again that is that is not uh surprising uh either because like uh nowadays when you talk about deploying uh to um uh to either either either the cloud or or the data center kubernetes is definitely one of the one of the options that you uh evaluate as a tech team right um and uh kubernetes uh is uh is a great uh present I think it's it's one of the grounding uh achievements uh for for the open source Community um I think uh Google um gave it to the world I think around 2015 and they they actually did did like something better than actually just just um and then just like contributing the software they actually cheated cncf uh which is cloud native Computing uh Foundation they actually see that cncf with kubernetes and and for those who are not familiar cncf is is what is driving a lot of uh innovation in the in the container world or or in the or in the uh like software development world in in general for the last uh seven years now um cncf has uh has has a lot of uh backing from a lot of Industry leaders and when I say backing a lot of it is also Financial so thousands of well hundreds I should say hundreds of of projects and and uh and thousands of Engineers have come out of uh says out of cncf and and this like this single decision by Google uh to to seed cncf really it it really uh gave a big push uh in in the in the right direction as far as the container world was uh uh concerned because now they managed to build a complete ecosystem out of kubernetes uh almost everything is configurable you can you can replace one thing with the with the other people come up with uh higher level abstractions uh people coming from people have come up with it commercial products uh which which are new features which are contributed back um um so so the whole ecosystem right now is is kind of so mature that that well uh you can see fortunately or or unfortunately uh uh The Innovation just in like pure container world has kind of like been been overshot over overshadowed by um by the orchestration this may not be a bad thing like containers are fairly mature nowadays but but that is where we we kind of are at this uh point of time foreign again like I will not run kubernetes here but uh these are like this is this is like a simple way you can um deploy something to kubernetes here I'm creating a deployment where I'm saying I'm simply deploying a classic Echo server uh second line I am getting pods so pods are basically for the lack of a better word uh their container instances so I'm asking communities to show me the the container instances which were deployed uh with the first line where I created a deployment and in the next line I'm simply exposing a port um from from those set of pods and that answer that ends up [Music] um creating Services uh so so these are very abstracted kind of commands it's actually doing a lot more than what it shows but but this kind of like goes to show where the where the container deployment code uh is at where the container orchestration world is nowadays foreign some footnotes uh there are there is a lot of things that I've not mentioned I've skipped over more things than I've than I've mentioned um but I will I will I will just attempt to sort of like uh just be be fair to a few things which are uh which are of note I think um I've briefly mentioned in Linux namespaces uh this was this was a very important uh Milestone because it it introduced uh the concept of process uh isolation in in terms of um uh not just like process IDs but but things like uh users and Network and and uh and and things like that uh and it was it was formally uh added to the kernel in in 2002 so I think that was that was a great uh thing uh that that is still um leaping towards uh in the Linux world nowadays um I've briefly mentioned Rockets the rocket was launched around the same time as Docker so um there is there is some impression in in some parts of the world that that Docker was developed in isolation it wasn't really like there was a movement to sort of get into a more consumer friendly uh uh containerization framework rocket was one of them and it launched around the same time as docker and the world came to kind of a full circle uh we saw how Docker started with uh um with running on lxc but now we have lxc running oci containers so basically now you now lxc can run docker um um I've not mentioned misos but misos uh is kind of a now it's it's kind of marketed as like kind of a data center operating system uh and uh mesos can do a bunch of different kind of workloads not just containers but uh mesos also natively supported oci in 2016 sort of again solidifying um the the fact that competitors sort of like came to a common ground uh cncf I've already mentioned and I've also mentioned that uh right now there are dozens of commercial kubernetes Solutions commercial and open source um kubernetes implementations that you can use all right which brings us to the present or like uh how am I doing on time is it all right guys all good uh I think I have I don't have a lot of time left I hope it has been engaging till now but uh I might have to rush a bit um so let's let's get to let's get to the current state of the world now deliberately kept it uh a little um light um I'm only going to talk about numbers because we live in the in the present world so I think we can kind of like come to come to an an agreement amongst ourselves talking to our friends uh in real world about what the world is like uh but um and and these these numbers some of them are from kotner some of them are from uh from cncf's uh annual um survey so right now uh we can see that 10 of all workloads are contained that sounds like a very small number but we have to understand that this is 10 of all workloads ever in the world so the world has spent a lot of a lot of time uh writing a lot of software these are banking like huge huge banking uh software implementations or financial software implementations there are there are embedded uh um uh so there is Emirates software as well there's a lot there is a lot of software that that runs uh yeah so um ten percent is a significant number if you just consider that containers have only become popular in the last nine to ten years uh and an average host uh uh that and containers nowadays runs eight uh containers on it which is which is great because it because this is not just uh uh use of resources but it's also great energy says um says saving as well and uh I see I see no like uh this is this is a time of uh time for going green and um utilizing the resources to to the maximum is the need of R for a lot of reasons but uh running multiple machines on a single on single piece of Hardware is great um 90 of uh open of kubernetes runs in the cloud now now this is something that's pretty interesting because when kubernetes uh um came in like I I remember being being part of the hardware where people like this the end of uh like Cloud because people will just like spin up their own cloud now but as it turns out 90 of all kubernetes has actually run by the cloud providers so this is these are things like uh um uh eks I would say AWS is offering um then there's um uh Azure uh kubernetes Service as well uh IBM has it as well and of course the the original the OG uh which is Google Google runs a lot of kubernetes uh and and Google um I've I did not mention earlier but but Google uh really uh accelerated the Google kubernetes adoption by actually providing people free uh tier uh to to run these these uh uh these communities clusters as part of the kubernetes tutorial so so it was very easy for a new developer to come in and this this number I found very very interesting now did you take it with a pinch of salt because like these um these numbers are from cncf so people who respond to cncf um surveys um uh they probably are are aware of containers and and are interested already uh so it's kind of a self-selection but this is a very interesting number so 96 percent of tech companies are using or trailing kubernetes right now that is like that that number is so big that four percent kind of sounds like an error uh as far as statistics is is concerned so almost everyone or practically everyone uh is um using kubernetes now the keyword here is tech companies this is not all the companies in the world it is uh it is tech companies uh Gartner estimates that around 35 percent of the of of of all organizations are going to use uh kubernetes by 2025 so in the next couple of years so so the numbers are going up exponentially finally we come to the part uh where I get to lie to you and you guys like you cannot hold me um accountable because we are all guessing of course like SSL like predicting the future is easy uh if you have a time machine uh we don't so we will just we'll just uh say things and uh and hopefully some of them come to um so my predictions my my 46 predictions for the for the uh next few years uh I think there are going to be more containers in more places so not just in terms of number of containers but the places where you see uh containers is going to uh go up as well and this is already happening um Point of Sales Systems um uh in in supermarkets uh they've already started uh trialing um um uh kubernetes containers uh Edge Computing with the rise of 5G systems uh there is a lot there's a lot more uh Edge Computing than uh it was possible a few years back um there are going to be more straightforwards uh right now I think only around 10 percent of of uh workloads uh uh in um in kubernetes are suitable Now by stateful I mean like this is like persistent uh data right so so there will be I think a rise in uh in distributed data source like oculosdb yoga by DB um where people uh will start trusting uh the orchestration system to uh to to orchestrate their their data in a way there is going to be a lot more serverless out there I think uh most of the cloud providers have already uh started um like using uh kubernetes for for serverless in in one shape or the other but uh but Frameworks like uh data are already pretty mature and uh they they enable uh you to have event-based uh workloads um um that I think there's going to be a more a lot more cross-cloud um now we have been hearing about uh having hybrid uh um and multi-cloud workloads now people do that because you want you want High availability you also want to reduce costs you want best of best of the breed kind of a thing so uh with that there is definitely going to be more uh workloads which are going to be across uh multiple clusters and there's already a lot of work that's being done uh in this space there's a crossfully in there's dkp uh people also consider things like pulumi um to sort of like help people uh go across cloud there's going to be a lot more AI in ml workloads now um I I mentioned that you don't want to do a lot a lot of low low level Hardware stuff uh and and that has been sort of like one of the Achilles heel for for continuous but I think there is there is better like GPU uh integration that is happening uh it is it is almost there but but it's not as much as a CPU or memory uh provisioning so I think there is there is going to be a big tick in in the AI ml workloads uh in the in the in the coming model I don't I don't mean like your regular uh run run a few numbers kind of a thing but there is there are AI um uh there are AI uh um algorithms out there that that probably need to use a use the GPU a lot more um then I think I am also predicting the depth of the container because let's have a bit of controversial opinion um the rise of the anti container uh I think uh with systems like uh uh or the platforms like like a web assembly uh which lets you write a cross-platform binaries or binaries that can run uh in a cross platform runtime I think uh it is going to take more uh traction and asset becomes more more easy there is as there is more orchestration around it uh if it is something that really really works uh better uh than than regular containers I think it is it is going to um have got that option and that actually brings me to the end of this presentation thank you for uh being here thank you for bearing with me if you have any questions I can take a few questions for for the next few minutes if we don't have any any questions I think we can we can stop and just uh I'll ask one of the moderators to sort of drive it from here yep thank you PK thank you for your time thank you folks for joining I hope this is a kind of a presentation discussion most helpful um if you have any feedback if you have any uh suggestions please uh you can drop a message on the meet hub in case if you have any kind of an ideas or experiences that you would like to share with us over this devd platform even you can reach out to us using the Meetup foreign from Australia um good night thank you thank you
